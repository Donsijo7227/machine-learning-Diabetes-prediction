# -*- coding: utf-8 -*-
"""diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pdxH4iDswbvw9eRFnCiKsUNPwZcn40RC

Importing the dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analyzis

PIMA Diabetes dataset
"""

# loading the diabetes dataset to a dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and colums in this dataset diabetes
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 ---> Non-diabetic
1 ---> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# seperating the data and the labels

x = diabetes_dataset.drop(columns= 'Outcome', axis=1)
y = diabetes_dataset['Outcome']

print (x)

print(y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

standardized_data

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training the model

"""

classifier = svm.SVC(kernel = 'linear')

# training the support vector machine classifier
classifier.fit(x_train, y_train)

"""Model evaluation

Accuracy score
"""

# accuracy score on the training data
x_train_prediction= classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy score of the model is:' ,training_data_accuracy)

# accuracy score on the test data
x_test_prediction= classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy score of the test data  model is:' ,test_data_accuracy)

"""making a predictive system"""

input_data = (1,199,76,43,0,42.9,1.394,22)

# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshaping the array as we are predicting for one instence
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)

prediction = classifier.predict(std_data)


if(prediction[0] == 0):
  print('The perosn is not diabetic')
else:
  print('The person is diabetic')

prediction

